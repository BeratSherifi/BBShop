{"ast":null,"code":"export async function apiLogin(email, password) {\n  const response = await fetch('http://localhost:5197/api/auth/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Login failed');\n  }\n  return response.json();\n}\nexport async function apiRegister(username, email, password, fullname, role) {\n  const response = await fetch('http://localhost:5197/api/user', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      email,\n      password,\n      fullname,\n      role\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Registration failed');\n  }\n  const responseData = await response.text();\n  return responseData ? JSON.parse(responseData) : {};\n}\nexport async function apiGetUserProfile(userId, token) {\n  const response = await fetch(`http://localhost:5197/api/user/${userId}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch profile');\n  }\n  return response.json();\n}\nexport async function apiGetStores(token) {\n  const response = await fetch('http://localhost:5197/api/store', {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch stores');\n  }\n  return response.json();\n}\nexport async function apiCreateStore(storeName, token) {\n  const formData = new FormData();\n  formData.append('storeName', storeName);\n  const response = await fetch('http://localhost:5197/api/store', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create store');\n  }\n  return response.json();\n}\nexport async function apiUpdateProduct(productId, productData, token) {\n  const response = await fetch(`http://localhost:5197/api/product/${productId}`, {\n    method: 'PUT',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    body: productData\n  });\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Failed to update product: ${errorText}`);\n  }\n\n  // Expect no content status for successful update\n  if (response.status === 204) {\n    return true;\n  }\n  return response.json();\n}\nexport async function apiDeleteProduct(productId, token) {\n  const response = await fetch(`http://localhost:5197/api/product/${productId}`, {\n    method: 'DELETE',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Failed to delete product: ${errorText}`);\n  }\n\n  // Expect no content status for successful delete\n  if (response.status === 204) {\n    return true;\n  }\n  return response.json();\n}\nexport async function apiGetProductById(productId, token) {\n  const response = await fetch(`http://localhost:5197/api/product/${productId}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch product');\n  }\n  return response.json();\n}\nexport async function apiGetOrdersByStoreId(storeId, token) {\n  const response = await fetch(`http://localhost:5197/api/order/by-store/${storeId}`, {\n    method: 'GET',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch orders');\n  }\n  return response.json();\n}\nexport async function apiCreateOrder(orderData, token) {\n  const response = await fetch('http://localhost:5197/api/order', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(orderData)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create order');\n  }\n  return response.json();\n}\nexport async function apiUpdateOrderStatus(orderId, status, token) {\n  const response = await fetch(`http://localhost:5197/api/order/${orderId}/status`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(status)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to update order status');\n  }\n}","map":{"version":3,"names":["apiLogin","email","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","apiRegister","username","fullname","role","responseData","text","parse","apiGetUserProfile","userId","token","apiGetStores","apiCreateStore","storeName","formData","FormData","append","apiUpdateProduct","productId","productData","errorText","status","apiDeleteProduct","apiGetProductById","apiGetOrdersByStoreId","storeId","apiCreateOrder","orderData","apiUpdateOrderStatus","orderId"],"sources":["/home/linux/RiderProjects/BBShop/frontend/src/api.js"],"sourcesContent":["export async function apiLogin(email, password) {\n  const response = await fetch('http://localhost:5197/api/auth/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ email, password }),\n  });\n  if (!response.ok) {\n    throw new Error('Login failed');\n  }\n  return response.json();\n}\n\nexport async function apiRegister(username, email, password, fullname, role) {\n  const response = await fetch('http://localhost:5197/api/user', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ username, email, password, fullname, role }),\n  });\n  if (!response.ok) {\n    throw new Error('Registration failed');\n  }\n  const responseData = await response.text();\n  return responseData ? JSON.parse(responseData) : {};\n}\n\nexport async function apiGetUserProfile(userId, token) {\n  const response = await fetch(`http://localhost:5197/api/user/${userId}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    },\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch profile');\n  }\n  return response.json();\n}\n\nexport async function apiGetStores(token) {\n  const response = await fetch('http://localhost:5197/api/store', {\n    headers: {\n      'Authorization': `Bearer ${token}`,\n    },\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch stores');\n  }\n  return response.json();\n}\n\nexport async function apiCreateStore(storeName, token) {\n  const formData = new FormData();\n  formData.append('storeName', storeName);\n\n  const response = await fetch('http://localhost:5197/api/store', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n    },\n    body: formData,\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to create store');\n  }\n  return response.json();\n}\n\nexport async function apiUpdateProduct(productId, productData, token) {\n  const response = await fetch(`http://localhost:5197/api/product/${productId}`, {\n    method: 'PUT',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n    },\n    body: productData,\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Failed to update product: ${errorText}`);\n  }\n\n  // Expect no content status for successful update\n  if (response.status === 204) {\n    return true;\n  }\n\n  return response.json();\n}\n\nexport async function apiDeleteProduct(productId, token) {\n  const response = await fetch(`http://localhost:5197/api/product/${productId}`, {\n    method: 'DELETE',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n    },\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Failed to delete product: ${errorText}`);\n  }\n\n  // Expect no content status for successful delete\n  if (response.status === 204) {\n    return true;\n  }\n\n  return response.json();\n}\n\nexport async function apiGetProductById(productId, token) {\n  const response = await fetch(`http://localhost:5197/api/product/${productId}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    },\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch product');\n  }\n  return response.json();\n}\n\nexport async function apiGetOrdersByStoreId(storeId, token) {\n  const response = await fetch(`http://localhost:5197/api/order/by-store/${storeId}`, {\n    method: 'GET',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n    },\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch orders');\n  }\n  return response.json();\n}\n\nexport async function apiCreateOrder(orderData, token) {\n  const response = await fetch('http://localhost:5197/api/order', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    },\n    body: JSON.stringify(orderData),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create order');\n  }\n  return response.json();\n}\n\nexport async function apiUpdateOrderStatus(orderId, status, token) {\n  const response = await fetch(`http://localhost:5197/api/order/${orderId}/status`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    },\n    body: JSON.stringify(status),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to update order status');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}