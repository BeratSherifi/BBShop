{"ast":null,"code":"export async function apiLogin(email, password) {\n  const response = await fetch('http://localhost:5197/api/auth/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Login failed');\n  }\n  return response.json();\n}\nexport async function apiRegister(username, email, password, fullname, role) {\n  const response = await fetch('http://localhost:5197/api/user', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      email,\n      password,\n      fullname,\n      role\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Registration failed');\n  }\n\n  // Handle plain text response\n  const responseData = await response.text();\n  try {\n    return JSON.parse(responseData);\n  } catch (error) {\n    return responseData;\n  }\n}\nexport async function apiGetStores(token) {\n  const response = await fetch('http://localhost:5197/api/store', {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch stores');\n  }\n  return response.json();\n}\nexport async function apiCreateStore(storeName, token) {\n  const formData = new FormData();\n  formData.append('storeName', storeName);\n  const response = await fetch('http://localhost:5197/api/store', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create store');\n  }\n  return response.json();\n}","map":{"version":3,"names":["apiLogin","email","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","apiRegister","username","fullname","role","responseData","text","parse","error","apiGetStores","token","apiCreateStore","storeName","formData","FormData","append"],"sources":["/home/linux/RiderProjects/BBShop/frontend/src/api.js"],"sourcesContent":["export async function apiLogin(email, password) {\n    const response = await fetch('http://localhost:5197/api/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    });\n    if (!response.ok) {\n      throw new Error('Login failed');\n    }\n    return response.json();\n  }\n  \n  export async function apiRegister(username, email, password, fullname, role) {\n    const response = await fetch('http://localhost:5197/api/user', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ username, email, password, fullname, role }),\n    });\n    \n    if (!response.ok) {\n      throw new Error('Registration failed');\n    }\n  \n    // Handle plain text response\n    const responseData = await response.text();\n    try {\n      return JSON.parse(responseData);\n    } catch (error) {\n      return responseData;\n    }\n  }\n  \n\n  \n  export async function apiGetStores(token) {\n    const response = await fetch('http://localhost:5197/api/store', {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch stores');\n    }\n    return response.json();\n  }\n  \n  export async function apiCreateStore(storeName, token) {\n    const formData = new FormData();\n    formData.append('storeName', storeName);\n  \n    const response = await fetch('http://localhost:5197/api/store', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n      body: formData,\n    });\n  \n    if (!response.ok) {\n      throw new Error('Failed to create store');\n    }\n    return response.json();\n  }\n  "],"mappings":"AAAA,OAAO,eAAeA,QAAQA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAC5C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;IACnEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;EACjC;EACA,OAAOR,QAAQ,CAACS,IAAI,CAAC,CAAC;AACxB;AAEA,OAAO,eAAeC,WAAWA,CAACC,QAAQ,EAAEb,KAAK,EAAEC,QAAQ,EAAEa,QAAQ,EAAEC,IAAI,EAAE;EAC3E,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;IAC7DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEK,QAAQ;MAAEb,KAAK;MAAEC,QAAQ;MAAEa,QAAQ;MAAEC;IAAK,CAAC;EACpE,CAAC,CAAC;EAEF,IAAI,CAACb,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;EACxC;;EAEA;EACA,MAAMM,YAAY,GAAG,MAAMd,QAAQ,CAACe,IAAI,CAAC,CAAC;EAC1C,IAAI;IACF,OAAOV,IAAI,CAACW,KAAK,CAACF,YAAY,CAAC;EACjC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd,OAAOH,YAAY;EACrB;AACF;AAIA,OAAO,eAAeI,YAAYA,CAACC,KAAK,EAAE;EACxC,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;IAC9DE,OAAO,EAAE;MACP,eAAe,EAAE,UAAUgB,KAAK;IAClC;EACF,CAAC,CAAC;EACF,IAAI,CAACnB,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EACA,OAAOR,QAAQ,CAACS,IAAI,CAAC,CAAC;AACxB;AAEA,OAAO,eAAeW,cAAcA,CAACC,SAAS,EAAEF,KAAK,EAAE;EACrD,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEH,SAAS,CAAC;EAEvC,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;IAC9DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUgB,KAAK;IAClC,CAAC;IACDf,IAAI,EAAEkB;EACR,CAAC,CAAC;EAEF,IAAI,CAACtB,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EACA,OAAOR,QAAQ,CAACS,IAAI,CAAC,CAAC;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}